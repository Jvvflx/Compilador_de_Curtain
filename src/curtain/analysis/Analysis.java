/* This file was generated by SableCC (http://www.sablecc.org/). */

package curtain.analysis;

import curtain.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAGrammarStart(AGrammarStart node);
    void caseAExpressionStart(AExpressionStart node);
    void caseAAtribuicaoStart(AAtribuicaoStart node);
    void caseAGrammar(AGrammar node);
    void caseAPackage(APackage node);
    void caseAPkgName(APkgName node);
    void caseAPkgNameTail(APkgNameTail node);
    void caseAHelpers(AHelpers node);
    void caseAHelperDef(AHelperDef node);
    void caseAStates(AStates node);
    void caseAIdList(AIdList node);
    void caseAIdListTail(AIdListTail node);
    void caseATokens(ATokens node);
    void caseATokenDef(ATokenDef node);
    void caseAStateList(AStateList node);
    void caseAStateListTail(AStateListTail node);
    void caseATransition(ATransition node);
    void caseAIgnTokens(AIgnTokens node);
    void caseALookAhead(ALookAhead node);
    void caseAExprReg(AExprReg node);
    void caseAExprRegTail(AExprRegTail node);
    void caseAConcat(AConcat node);
    void caseAExprUn(AExprUn node);
    void caseAIntTipos(AIntTipos node);
    void caseAFloatTipos(AFloatTipos node);
    void caseADoubleTipos(ADoubleTipos node);
    void caseACharTipos(ACharTipos node);
    void caseAStringTipos(AStringTipos node);
    void caseACharBasic(ACharBasic node);
    void caseAConjuntoBasic(AConjuntoBasic node);
    void caseAStringBasic(AStringBasic node);
    void caseAIdBasic(AIdBasic node);
    void caseAExprRegBasic(AExprRegBasic node);
    void caseACharChar(ACharChar node);
    void caseADecChar(ADecChar node);
    void caseAHexChar(AHexChar node);
    void caseAOperacaoConjunto(AOperacaoConjunto node);
    void caseAIntervaloConjunto(AIntervaloConjunto node);
    void caseAEstrelaOpUn(AEstrelaOpUn node);
    void caseAQMarkOpUn(AQMarkOpUn node);
    void caseAMaisOpUn(AMaisOpUn node);
    void caseAMaisOpBin(AMaisOpBin node);
    void caseAMenosOpBin(AMenosOpBin node);
    void caseAProductions(AProductions node);
    void caseAProd(AProd node);
    void caseAAlts(AAlts node);
    void caseAAltsTail(AAltsTail node);
    void caseAParsedAlt(AParsedAlt node);
    void caseAIgnoredAlt(AIgnoredAlt node);
    void caseAAltName(AAltName node);
    void caseAElem(AElem node);
    void caseAElemName(AElemName node);
    void caseATokenSpecifier(ATokenSpecifier node);
    void caseAProductionSpecifier(AProductionSpecifier node);
    void caseAFactorExpr(AFactorExpr node);
    void caseASomaExpr(ASomaExpr node);
    void caseASubtracaoExpr(ASubtracaoExpr node);
    void caseATermFactor(ATermFactor node);
    void caseAMultiplicacaoFactor(AMultiplicacaoFactor node);
    void caseADivisaoFactor(ADivisaoFactor node);
    void caseAModuloFactor(AModuloFactor node);
    void caseADivisaointFactor(ADivisaointFactor node);
    void caseANumeroTerm(ANumeroTerm node);
    void caseAExprTerm(AExprTerm node);
    void caseASinonimoAtr(ASinonimoAtr node);
    void caseAEquivaleAtr(AEquivaleAtr node);

    void caseTPkgId(TPkgId node);
    void caseTPackage(TPackage node);
    void caseTStates(TStates node);
    void caseTHelpers(THelpers node);
    void caseTTokens(TTokens node);
    void caseTIgnored(TIgnored node);
    void caseTProductions(TProductions node);
    void caseTTokenSpecifier(TTokenSpecifier node);
    void caseTProductionSpceifier(TProductionSpceifier node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTVirgula(TVirgula node);
    void caseTDot(TDot node);
    void caseTDDot(TDDot node);
    void caseTIgualdade(TIgualdade node);
    void caseTMaisEq(TMaisEq node);
    void caseTMenosEq(TMenosEq node);
    void caseTMultEq(TMultEq node);
    void caseTDivEq(TDivEq node);
    void caseTModEq(TModEq node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTLteq(TLteq node);
    void caseTGt(TGt node);
    void caseTGteq(TGteq node);
    void caseTMMais(TMMais node);
    void caseTMMenos(TMMenos node);
    void caseTShl(TShl node);
    void caseTShr(TShr node);
    void caseTOr(TOr node);
    void caseTAnd(TAnd node);
    void caseTXor(TXor node);
    void caseTColEsq(TColEsq node);
    void caseTColDir(TColDir node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTChaveEsq(TChaveEsq node);
    void caseTChaveDir(TChaveDir node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTQMark(TQMark node);
    void caseTEMark(TEMark node);
    void caseTEstrela(TEstrela node);
    void caseTBarra(TBarra node);
    void caseTSlash(TSlash node);
    void caseTSSlash(TSSlash node);
    void caseTMod(TMod node);
    void caseTSetaDir(TSetaDir node);
    void caseTCase(TCase node);
    void caseTDefault(TDefault node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTSwitch(TSwitch node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTFor(TFor node);
    void caseTContinue(TContinue node);
    void caseTBreak(TBreak node);
    void caseTReturn(TReturn node);
    void caseTTypedef(TTypedef node);
    void caseTIntSpecifier(TIntSpecifier node);
    void caseTFloatSpecifier(TFloatSpecifier node);
    void caseTDoubleSpecifier(TDoubleSpecifier node);
    void caseTStringSpecifier(TStringSpecifier node);
    void caseTCharSpecifier(TCharSpecifier node);
    void caseTSigned(TSigned node);
    void caseTUnsigned(TUnsigned node);
    void caseTStruct(TStruct node);
    void caseTId(TId node);
    void caseTId2(TId2 node);
    void caseTChar(TChar node);
    void caseTCharDec(TCharDec node);
    void caseTCharHexa(TCharHexa node);
    void caseTString(TString node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
