/* This file was generated by SableCC (http://www.sablecc.org/). */

package curtain.analysis;

import java.util.*;
import curtain.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGrammarStart(AGrammarStart node)
    {
        defaultIn(node);
    }

    public void outAGrammarStart(AGrammarStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGrammarStart(AGrammarStart node)
    {
        inAGrammarStart(node);
        if(node.getGrammar() != null)
        {
            node.getGrammar().apply(this);
        }
        outAGrammarStart(node);
    }

    public void inAExpressionStart(AExpressionStart node)
    {
        defaultIn(node);
    }

    public void outAExpressionStart(AExpressionStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionStart(AExpressionStart node)
    {
        inAExpressionStart(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpressionStart(node);
    }

    public void inAAtribuicaoStart(AAtribuicaoStart node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoStart(AAtribuicaoStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoStart(AAtribuicaoStart node)
    {
        inAAtribuicaoStart(node);
        if(node.getAtr() != null)
        {
            node.getAtr().apply(this);
        }
        outAAtribuicaoStart(node);
    }

    public void inAGrammar(AGrammar node)
    {
        defaultIn(node);
    }

    public void outAGrammar(AGrammar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGrammar(AGrammar node)
    {
        inAGrammar(node);
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        if(node.getHelpers() != null)
        {
            node.getHelpers().apply(this);
        }
        if(node.getStates() != null)
        {
            node.getStates().apply(this);
        }
        if(node.getTokens() != null)
        {
            node.getTokens().apply(this);
        }
        if(node.getIgnTokens() != null)
        {
            node.getIgnTokens().apply(this);
        }
        if(node.getProductions() != null)
        {
            node.getProductions().apply(this);
        }
        outAGrammar(node);
    }

    public void inAPackage(APackage node)
    {
        defaultIn(node);
    }

    public void outAPackage(APackage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPackage(APackage node)
    {
        inAPackage(node);
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        if(node.getPkgName() != null)
        {
            node.getPkgName().apply(this);
        }
        outAPackage(node);
    }

    public void inAPkgName(APkgName node)
    {
        defaultIn(node);
    }

    public void outAPkgName(APkgName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPkgName(APkgName node)
    {
        inAPkgName(node);
        if(node.getPkgId() != null)
        {
            node.getPkgId().apply(this);
        }
        {
            List<PPkgNameTail> copy = new ArrayList<PPkgNameTail>(node.getPkgIds());
            for(PPkgNameTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPkgName(node);
    }

    public void inAPkgNameTail(APkgNameTail node)
    {
        defaultIn(node);
    }

    public void outAPkgNameTail(APkgNameTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPkgNameTail(APkgNameTail node)
    {
        inAPkgNameTail(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getPkgId() != null)
        {
            node.getPkgId().apply(this);
        }
        outAPkgNameTail(node);
    }

    public void inAHelpers(AHelpers node)
    {
        defaultIn(node);
    }

    public void outAHelpers(AHelpers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHelpers(AHelpers node)
    {
        inAHelpers(node);
        if(node.getHelpers() != null)
        {
            node.getHelpers().apply(this);
        }
        {
            List<PHelperDef> copy = new ArrayList<PHelperDef>(node.getHelperDefs());
            for(PHelperDef e : copy)
            {
                e.apply(this);
            }
        }
        outAHelpers(node);
    }

    public void inAHelperDef(AHelperDef node)
    {
        defaultIn(node);
    }

    public void outAHelperDef(AHelperDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHelperDef(AHelperDef node)
    {
        inAHelperDef(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getExprReg() != null)
        {
            node.getExprReg().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAHelperDef(node);
    }

    public void inAStates(AStates node)
    {
        defaultIn(node);
    }

    public void outAStates(AStates node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStates(AStates node)
    {
        inAStates(node);
        if(node.getStates() != null)
        {
            node.getStates().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStates(node);
    }

    public void inAIdList(AIdList node)
    {
        defaultIn(node);
    }

    public void outAIdList(AIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdList(AIdList node)
    {
        inAIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PIdListTail> copy = new ArrayList<PIdListTail>(node.getIds());
            for(PIdListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAIdList(node);
    }

    public void inAIdListTail(AIdListTail node)
    {
        defaultIn(node);
    }

    public void outAIdListTail(AIdListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdListTail(AIdListTail node)
    {
        inAIdListTail(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdListTail(node);
    }

    public void inATokens(ATokens node)
    {
        defaultIn(node);
    }

    public void outATokens(ATokens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATokens(ATokens node)
    {
        inATokens(node);
        if(node.getTokens() != null)
        {
            node.getTokens().apply(this);
        }
        {
            List<PTokenDef> copy = new ArrayList<PTokenDef>(node.getTokenDefs());
            for(PTokenDef e : copy)
            {
                e.apply(this);
            }
        }
        outATokens(node);
    }

    public void inATokenDef(ATokenDef node)
    {
        defaultIn(node);
    }

    public void outATokenDef(ATokenDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATokenDef(ATokenDef node)
    {
        inATokenDef(node);
        if(node.getStateList() != null)
        {
            node.getStateList().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getExprReg() != null)
        {
            node.getExprReg().apply(this);
        }
        if(node.getLookAhead() != null)
        {
            node.getLookAhead().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATokenDef(node);
    }

    public void inAStateList(AStateList node)
    {
        defaultIn(node);
    }

    public void outAStateList(AStateList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStateList(AStateList node)
    {
        inAStateList(node);
        if(node.getChaveEsq() != null)
        {
            node.getChaveEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTransition() != null)
        {
            node.getTransition().apply(this);
        }
        {
            List<PStateListTail> copy = new ArrayList<PStateListTail>(node.getStateLists());
            for(PStateListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getChaveDir() != null)
        {
            node.getChaveDir().apply(this);
        }
        outAStateList(node);
    }

    public void inAStateListTail(AStateListTail node)
    {
        defaultIn(node);
    }

    public void outAStateListTail(AStateListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStateListTail(AStateListTail node)
    {
        inAStateListTail(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTransition() != null)
        {
            node.getTransition().apply(this);
        }
        outAStateListTail(node);
    }

    public void inATransition(ATransition node)
    {
        defaultIn(node);
    }

    public void outATransition(ATransition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATransition(ATransition node)
    {
        inATransition(node);
        if(node.getSetaDir() != null)
        {
            node.getSetaDir().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATransition(node);
    }

    public void inAIgnTokens(AIgnTokens node)
    {
        defaultIn(node);
    }

    public void outAIgnTokens(AIgnTokens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgnTokens(AIgnTokens node)
    {
        inAIgnTokens(node);
        if(node.getIgnored() != null)
        {
            node.getIgnored().apply(this);
        }
        if(node.getTokens() != null)
        {
            node.getTokens().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIgnTokens(node);
    }

    public void inALookAhead(ALookAhead node)
    {
        defaultIn(node);
    }

    public void outALookAhead(ALookAhead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALookAhead(ALookAhead node)
    {
        inALookAhead(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getExprReg() != null)
        {
            node.getExprReg().apply(this);
        }
        outALookAhead(node);
    }

    public void inAExprReg(AExprReg node)
    {
        defaultIn(node);
    }

    public void outAExprReg(AExprReg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprReg(AExprReg node)
    {
        inAExprReg(node);
        if(node.getConcat() != null)
        {
            node.getConcat().apply(this);
        }
        {
            List<PExprRegTail> copy = new ArrayList<PExprRegTail>(node.getConcats());
            for(PExprRegTail e : copy)
            {
                e.apply(this);
            }
        }
        outAExprReg(node);
    }

    public void inAExprRegTail(AExprRegTail node)
    {
        defaultIn(node);
    }

    public void outAExprRegTail(AExprRegTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprRegTail(AExprRegTail node)
    {
        inAExprRegTail(node);
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        if(node.getConcat() != null)
        {
            node.getConcat().apply(this);
        }
        outAExprRegTail(node);
    }

    public void inAConcat(AConcat node)
    {
        defaultIn(node);
    }

    public void outAConcat(AConcat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcat(AConcat node)
    {
        inAConcat(node);
        {
            List<PExprUn> copy = new ArrayList<PExprUn>(node.getExprUns());
            for(PExprUn e : copy)
            {
                e.apply(this);
            }
        }
        outAConcat(node);
    }

    public void inAExprUn(AExprUn node)
    {
        defaultIn(node);
    }

    public void outAExprUn(AExprUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprUn(AExprUn node)
    {
        inAExprUn(node);
        if(node.getBasic() != null)
        {
            node.getBasic().apply(this);
        }
        if(node.getOpUn() != null)
        {
            node.getOpUn().apply(this);
        }
        outAExprUn(node);
    }

    public void inAIntTipos(AIntTipos node)
    {
        defaultIn(node);
    }

    public void outAIntTipos(AIntTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipos(AIntTipos node)
    {
        inAIntTipos(node);
        if(node.getIntSpecifier() != null)
        {
            node.getIntSpecifier().apply(this);
        }
        outAIntTipos(node);
    }

    public void inAFloatTipos(AFloatTipos node)
    {
        defaultIn(node);
    }

    public void outAFloatTipos(AFloatTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatTipos(AFloatTipos node)
    {
        inAFloatTipos(node);
        if(node.getFloatSpecifier() != null)
        {
            node.getFloatSpecifier().apply(this);
        }
        outAFloatTipos(node);
    }

    public void inADoubleTipos(ADoubleTipos node)
    {
        defaultIn(node);
    }

    public void outADoubleTipos(ADoubleTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleTipos(ADoubleTipos node)
    {
        inADoubleTipos(node);
        if(node.getDoubleSpecifier() != null)
        {
            node.getDoubleSpecifier().apply(this);
        }
        outADoubleTipos(node);
    }

    public void inACharTipos(ACharTipos node)
    {
        defaultIn(node);
    }

    public void outACharTipos(ACharTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipos(ACharTipos node)
    {
        inACharTipos(node);
        if(node.getCharSpecifier() != null)
        {
            node.getCharSpecifier().apply(this);
        }
        outACharTipos(node);
    }

    public void inAStringTipos(AStringTipos node)
    {
        defaultIn(node);
    }

    public void outAStringTipos(AStringTipos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipos(AStringTipos node)
    {
        inAStringTipos(node);
        if(node.getStringSpecifier() != null)
        {
            node.getStringSpecifier().apply(this);
        }
        outAStringTipos(node);
    }

    public void inACharBasic(ACharBasic node)
    {
        defaultIn(node);
    }

    public void outACharBasic(ACharBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharBasic(ACharBasic node)
    {
        inACharBasic(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharBasic(node);
    }

    public void inAConjuntoBasic(AConjuntoBasic node)
    {
        defaultIn(node);
    }

    public void outAConjuntoBasic(AConjuntoBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjuntoBasic(AConjuntoBasic node)
    {
        inAConjuntoBasic(node);
        if(node.getConjunto() != null)
        {
            node.getConjunto().apply(this);
        }
        outAConjuntoBasic(node);
    }

    public void inAStringBasic(AStringBasic node)
    {
        defaultIn(node);
    }

    public void outAStringBasic(AStringBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringBasic(AStringBasic node)
    {
        inAStringBasic(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringBasic(node);
    }

    public void inAIdBasic(AIdBasic node)
    {
        defaultIn(node);
    }

    public void outAIdBasic(AIdBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdBasic(AIdBasic node)
    {
        inAIdBasic(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdBasic(node);
    }

    public void inAExprRegBasic(AExprRegBasic node)
    {
        defaultIn(node);
    }

    public void outAExprRegBasic(AExprRegBasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprRegBasic(AExprRegBasic node)
    {
        inAExprRegBasic(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExprReg() != null)
        {
            node.getExprReg().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAExprRegBasic(node);
    }

    public void inACharChar(ACharChar node)
    {
        defaultIn(node);
    }

    public void outACharChar(ACharChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharChar(ACharChar node)
    {
        inACharChar(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharChar(node);
    }

    public void inADecChar(ADecChar node)
    {
        defaultIn(node);
    }

    public void outADecChar(ADecChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecChar(ADecChar node)
    {
        inADecChar(node);
        if(node.getCharDec() != null)
        {
            node.getCharDec().apply(this);
        }
        outADecChar(node);
    }

    public void inAHexChar(AHexChar node)
    {
        defaultIn(node);
    }

    public void outAHexChar(AHexChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexChar(AHexChar node)
    {
        inAHexChar(node);
        if(node.getCharHexa() != null)
        {
            node.getCharHexa().apply(this);
        }
        outAHexChar(node);
    }

    public void inAOperacaoConjunto(AOperacaoConjunto node)
    {
        defaultIn(node);
    }

    public void outAOperacaoConjunto(AOperacaoConjunto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoConjunto(AOperacaoConjunto node)
    {
        inAOperacaoConjunto(node);
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOpBin() != null)
        {
            node.getOpBin().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        outAOperacaoConjunto(node);
    }

    public void inAIntervaloConjunto(AIntervaloConjunto node)
    {
        defaultIn(node);
    }

    public void outAIntervaloConjunto(AIntervaloConjunto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntervaloConjunto(AIntervaloConjunto node)
    {
        inAIntervaloConjunto(node);
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDDot() != null)
        {
            node.getDDot().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        outAIntervaloConjunto(node);
    }

    public void inAEstrelaOpUn(AEstrelaOpUn node)
    {
        defaultIn(node);
    }

    public void outAEstrelaOpUn(AEstrelaOpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEstrelaOpUn(AEstrelaOpUn node)
    {
        inAEstrelaOpUn(node);
        if(node.getEstrela() != null)
        {
            node.getEstrela().apply(this);
        }
        outAEstrelaOpUn(node);
    }

    public void inAQMarkOpUn(AQMarkOpUn node)
    {
        defaultIn(node);
    }

    public void outAQMarkOpUn(AQMarkOpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQMarkOpUn(AQMarkOpUn node)
    {
        inAQMarkOpUn(node);
        if(node.getQMark() != null)
        {
            node.getQMark().apply(this);
        }
        outAQMarkOpUn(node);
    }

    public void inAMaisOpUn(AMaisOpUn node)
    {
        defaultIn(node);
    }

    public void outAMaisOpUn(AMaisOpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisOpUn(AMaisOpUn node)
    {
        inAMaisOpUn(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisOpUn(node);
    }

    public void inAMaisOpBin(AMaisOpBin node)
    {
        defaultIn(node);
    }

    public void outAMaisOpBin(AMaisOpBin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisOpBin(AMaisOpBin node)
    {
        inAMaisOpBin(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisOpBin(node);
    }

    public void inAMenosOpBin(AMenosOpBin node)
    {
        defaultIn(node);
    }

    public void outAMenosOpBin(AMenosOpBin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosOpBin(AMenosOpBin node)
    {
        inAMenosOpBin(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosOpBin(node);
    }

    public void inAProductions(AProductions node)
    {
        defaultIn(node);
    }

    public void outAProductions(AProductions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProductions(AProductions node)
    {
        inAProductions(node);
        if(node.getProductions() != null)
        {
            node.getProductions().apply(this);
        }
        {
            List<PProd> copy = new ArrayList<PProd>(node.getProds());
            for(PProd e : copy)
            {
                e.apply(this);
            }
        }
        outAProductions(node);
    }

    public void inAProd(AProd node)
    {
        defaultIn(node);
    }

    public void outAProd(AProd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProd(AProd node)
    {
        inAProd(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getAlts() != null)
        {
            node.getAlts().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAProd(node);
    }

    public void inAAlts(AAlts node)
    {
        defaultIn(node);
    }

    public void outAAlts(AAlts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlts(AAlts node)
    {
        inAAlts(node);
        if(node.getAlt() != null)
        {
            node.getAlt().apply(this);
        }
        {
            List<PAltsTail> copy = new ArrayList<PAltsTail>(node.getAlts());
            for(PAltsTail e : copy)
            {
                e.apply(this);
            }
        }
        outAAlts(node);
    }

    public void inAAltsTail(AAltsTail node)
    {
        defaultIn(node);
    }

    public void outAAltsTail(AAltsTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAltsTail(AAltsTail node)
    {
        inAAltsTail(node);
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        if(node.getAlt() != null)
        {
            node.getAlt().apply(this);
        }
        outAAltsTail(node);
    }

    public void inAParsedAlt(AParsedAlt node)
    {
        defaultIn(node);
    }

    public void outAParsedAlt(AParsedAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParsedAlt(AParsedAlt node)
    {
        inAParsedAlt(node);
        if(node.getAltName() != null)
        {
            node.getAltName().apply(this);
        }
        {
            List<PElem> copy = new ArrayList<PElem>(node.getElems());
            for(PElem e : copy)
            {
                e.apply(this);
            }
        }
        outAParsedAlt(node);
    }

    public void inAIgnoredAlt(AIgnoredAlt node)
    {
        defaultIn(node);
    }

    public void outAIgnoredAlt(AIgnoredAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgnoredAlt(AIgnoredAlt node)
    {
        inAIgnoredAlt(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getAltName() != null)
        {
            node.getAltName().apply(this);
        }
        {
            List<PElem> copy = new ArrayList<PElem>(node.getElems());
            for(PElem e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAIgnoredAlt(node);
    }

    public void inAAltName(AAltName node)
    {
        defaultIn(node);
    }

    public void outAAltName(AAltName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAltName(AAltName node)
    {
        inAAltName(node);
        if(node.getChaveEsq() != null)
        {
            node.getChaveEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getChaveDir() != null)
        {
            node.getChaveDir().apply(this);
        }
        outAAltName(node);
    }

    public void inAElem(AElem node)
    {
        defaultIn(node);
    }

    public void outAElem(AElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElem(AElem node)
    {
        inAElem(node);
        if(node.getElemName() != null)
        {
            node.getElemName().apply(this);
        }
        if(node.getSpecifier() != null)
        {
            node.getSpecifier().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getOpUn() != null)
        {
            node.getOpUn().apply(this);
        }
        outAElem(node);
    }

    public void inAElemName(AElemName node)
    {
        defaultIn(node);
    }

    public void outAElemName(AElemName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElemName(AElemName node)
    {
        inAElemName(node);
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAElemName(node);
    }

    public void inATokenSpecifier(ATokenSpecifier node)
    {
        defaultIn(node);
    }

    public void outATokenSpecifier(ATokenSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATokenSpecifier(ATokenSpecifier node)
    {
        inATokenSpecifier(node);
        if(node.getTokenSpecifier() != null)
        {
            node.getTokenSpecifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outATokenSpecifier(node);
    }

    public void inAProductionSpecifier(AProductionSpecifier node)
    {
        defaultIn(node);
    }

    public void outAProductionSpecifier(AProductionSpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProductionSpecifier(AProductionSpecifier node)
    {
        inAProductionSpecifier(node);
        if(node.getProductionSpceifier() != null)
        {
            node.getProductionSpceifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAProductionSpecifier(node);
    }

    public void inAFactorExpr(AFactorExpr node)
    {
        defaultIn(node);
    }

    public void outAFactorExpr(AFactorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    public void inASomaExpr(ASomaExpr node)
    {
        defaultIn(node);
    }

    public void outASomaExpr(ASomaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpr(ASomaExpr node)
    {
        inASomaExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASomaExpr(node);
    }

    public void inASubtracaoExpr(ASubtracaoExpr node)
    {
        defaultIn(node);
    }

    public void outASubtracaoExpr(ASubtracaoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoExpr(ASubtracaoExpr node)
    {
        inASubtracaoExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASubtracaoExpr(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultiplicacaoFactor(AMultiplicacaoFactor node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoFactor(AMultiplicacaoFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoFactor(AMultiplicacaoFactor node)
    {
        inAMultiplicacaoFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getEstrela() != null)
        {
            node.getEstrela().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultiplicacaoFactor(node);
    }

    public void inADivisaoFactor(ADivisaoFactor node)
    {
        defaultIn(node);
    }

    public void outADivisaoFactor(ADivisaoFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoFactor(ADivisaoFactor node)
    {
        inADivisaoFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivisaoFactor(node);
    }

    public void inAModuloFactor(AModuloFactor node)
    {
        defaultIn(node);
    }

    public void outAModuloFactor(AModuloFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloFactor(AModuloFactor node)
    {
        inAModuloFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAModuloFactor(node);
    }

    public void inADivisaointFactor(ADivisaointFactor node)
    {
        defaultIn(node);
    }

    public void outADivisaointFactor(ADivisaointFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaointFactor(ADivisaointFactor node)
    {
        inADivisaointFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getSSlash() != null)
        {
            node.getSSlash().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivisaointFactor(node);
    }

    public void inANumeroTerm(ANumeroTerm node)
    {
        defaultIn(node);
    }

    public void outANumeroTerm(ANumeroTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTerm(ANumeroTerm node)
    {
        inANumeroTerm(node);
        if(node.getCharDec() != null)
        {
            node.getCharDec().apply(this);
        }
        outANumeroTerm(node);
    }

    public void inAExprTerm(AExprTerm node)
    {
        defaultIn(node);
    }

    public void outAExprTerm(AExprTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        inAExprTerm(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAExprTerm(node);
    }

    public void inASinonimoAtr(ASinonimoAtr node)
    {
        defaultIn(node);
    }

    public void outASinonimoAtr(ASinonimoAtr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinonimoAtr(ASinonimoAtr node)
    {
        inASinonimoAtr(node);
        if(node.getTipos() != null)
        {
            node.getTipos().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASinonimoAtr(node);
    }

    public void inAEquivaleAtr(AEquivaleAtr node)
    {
        defaultIn(node);
    }

    public void outAEquivaleAtr(AEquivaleAtr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquivaleAtr(AEquivaleAtr node)
    {
        inAEquivaleAtr(node);
        if(node.getTipos() != null)
        {
            node.getTipos().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAEquivaleAtr(node);
    }
}
