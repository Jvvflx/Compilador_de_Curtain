/* This file was generated by SableCC (http://www.sablecc.org/). */

package curtain.node;

import java.util.*;
import curtain.analysis.*;

@SuppressWarnings("nls")
public final class AExprReg extends PExprReg
{
    private PConcat _concat_;
    private final LinkedList<PExprRegTail> _concats_ = new LinkedList<PExprRegTail>();

    public AExprReg()
    {
        // Constructor
    }

    public AExprReg(
        @SuppressWarnings("hiding") PConcat _concat_,
        @SuppressWarnings("hiding") List<?> _concats_)
    {
        // Constructor
        setConcat(_concat_);

        setConcats(_concats_);

    }

    @Override
    public Object clone()
    {
        return new AExprReg(
            cloneNode(this._concat_),
            cloneList(this._concats_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprReg(this);
    }

    public PConcat getConcat()
    {
        return this._concat_;
    }

    public void setConcat(PConcat node)
    {
        if(this._concat_ != null)
        {
            this._concat_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._concat_ = node;
    }

    public LinkedList<PExprRegTail> getConcats()
    {
        return this._concats_;
    }

    public void setConcats(List<?> list)
    {
        for(PExprRegTail e : this._concats_)
        {
            e.parent(null);
        }
        this._concats_.clear();

        for(Object obj_e : list)
        {
            PExprRegTail e = (PExprRegTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._concats_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._concat_)
            + toString(this._concats_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._concat_ == child)
        {
            this._concat_ = null;
            return;
        }

        if(this._concats_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._concat_ == oldChild)
        {
            setConcat((PConcat) newChild);
            return;
        }

        for(ListIterator<PExprRegTail> i = this._concats_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExprRegTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
