/* This file was generated by SableCC (http://www.sablecc.org/). */

package curtain.node;

import curtain.analysis.*;

@SuppressWarnings("nls")
public final class AAltsTail extends PAltsTail
{
    private TBarra _barra_;
    private PAlt _alt_;

    public AAltsTail()
    {
        // Constructor
    }

    public AAltsTail(
        @SuppressWarnings("hiding") TBarra _barra_,
        @SuppressWarnings("hiding") PAlt _alt_)
    {
        // Constructor
        setBarra(_barra_);

        setAlt(_alt_);

    }

    @Override
    public Object clone()
    {
        return new AAltsTail(
            cloneNode(this._barra_),
            cloneNode(this._alt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAltsTail(this);
    }

    public TBarra getBarra()
    {
        return this._barra_;
    }

    public void setBarra(TBarra node)
    {
        if(this._barra_ != null)
        {
            this._barra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._barra_ = node;
    }

    public PAlt getAlt()
    {
        return this._alt_;
    }

    public void setAlt(PAlt node)
    {
        if(this._alt_ != null)
        {
            this._alt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._barra_)
            + toString(this._alt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._barra_ == child)
        {
            this._barra_ = null;
            return;
        }

        if(this._alt_ == child)
        {
            this._alt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._barra_ == oldChild)
        {
            setBarra((TBarra) newChild);
            return;
        }

        if(this._alt_ == oldChild)
        {
            setAlt((PAlt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
