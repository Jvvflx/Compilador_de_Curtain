/* This file was generated by SableCC (http://www.sablecc.org/). */

package curtain.node;

import curtain.analysis.*;

@SuppressWarnings("nls")
public final class ALookAhead extends PLookAhead
{
    private TSlash _slash_;
    private PExprReg _exprReg_;

    public ALookAhead()
    {
        // Constructor
    }

    public ALookAhead(
        @SuppressWarnings("hiding") TSlash _slash_,
        @SuppressWarnings("hiding") PExprReg _exprReg_)
    {
        // Constructor
        setSlash(_slash_);

        setExprReg(_exprReg_);

    }

    @Override
    public Object clone()
    {
        return new ALookAhead(
            cloneNode(this._slash_),
            cloneNode(this._exprReg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALookAhead(this);
    }

    public TSlash getSlash()
    {
        return this._slash_;
    }

    public void setSlash(TSlash node)
    {
        if(this._slash_ != null)
        {
            this._slash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._slash_ = node;
    }

    public PExprReg getExprReg()
    {
        return this._exprReg_;
    }

    public void setExprReg(PExprReg node)
    {
        if(this._exprReg_ != null)
        {
            this._exprReg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprReg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._slash_)
            + toString(this._exprReg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._slash_ == child)
        {
            this._slash_ = null;
            return;
        }

        if(this._exprReg_ == child)
        {
            this._exprReg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._slash_ == oldChild)
        {
            setSlash((TSlash) newChild);
            return;
        }

        if(this._exprReg_ == oldChild)
        {
            setExprReg((PExprReg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
